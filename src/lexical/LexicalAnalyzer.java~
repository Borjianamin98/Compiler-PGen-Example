/* The following code was generated by JFlex 1.7.0 */

package lexical;
import syntax.Lexical;

import java.io.IOException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Scanner.flex</tt>
 */
public class LexicalAnalyzer implements Lexical {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\36\1\3\1\2\1\5\1\6\1\1\16\36\4\0\1\67\1\41"+
    "\1\66\1\4\1\35\1\43\1\47\1\65\1\50\1\51\1\43\1\44"+
    "\1\51\1\45\1\55\1\46\1\56\7\62\2\57\1\54\1\51\1\43"+
    "\1\40\1\42\1\51\1\0\4\61\1\63\1\71\5\35\1\70\13\35"+
    "\1\60\2\35\1\52\1\64\1\53\1\47\1\35\1\0\1\15\1\25"+
    "\1\14\1\7\1\10\1\11\1\26\1\27\1\12\1\35\1\33\1\16"+
    "\1\35\1\13\1\23\1\24\1\35\1\21\1\17\1\20\1\22\1\30"+
    "\1\31\1\32\1\35\1\34\1\51\1\47\1\51\1\47\6\36\1\37"+
    "\32\36\2\0\4\35\4\0\1\35\2\0\1\36\7\0\1\35\4\0"+
    "\1\35\5\0\27\35\1\0\37\35\1\0\u01ca\35\4\0\14\35\16\0"+
    "\5\35\7\0\1\35\1\0\1\35\21\0\160\36\5\35\1\0\2\35"+
    "\2\0\4\35\1\0\1\35\6\0\1\35\1\0\3\35\1\0\1\35"+
    "\1\0\24\35\1\0\123\35\1\0\213\35\1\0\5\36\2\0\246\35"+
    "\1\0\46\35\2\0\1\35\7\0\47\35\7\0\1\35\1\0\55\36"+
    "\1\0\1\36\1\0\2\36\1\0\2\36\1\0\1\36\10\0\33\35"+
    "\5\0\3\35\15\0\6\36\5\0\1\35\4\0\13\36\1\0\1\36"+
    "\3\0\53\35\37\36\4\0\2\35\1\36\143\35\1\0\1\35\10\36"+
    "\1\0\6\36\2\35\2\36\1\0\4\36\2\35\12\36\3\35\2\0"+
    "\1\35\17\0\1\36\1\35\1\36\36\35\33\36\2\0\131\35\13\36"+
    "\1\35\16\0\12\36\41\35\11\36\2\35\4\0\1\35\5\0\26\35"+
    "\4\36\1\35\11\36\1\35\3\36\1\35\5\36\22\0\31\35\3\36"+
    "\104\0\25\35\56\0\41\36\66\35\3\36\1\35\22\36\1\35\7\36"+
    "\12\35\2\36\2\0\12\36\1\0\20\35\3\36\1\0\10\35\2\0"+
    "\2\35\2\0\26\35\1\0\7\35\1\0\1\35\3\0\4\35\2\0"+
    "\1\36\1\35\7\36\2\0\2\36\2\0\3\36\1\35\10\0\1\36"+
    "\4\0\2\35\1\0\3\35\2\36\2\0\12\36\4\35\7\0\1\35"+
    "\5\0\3\36\1\0\6\35\4\0\2\35\2\0\26\35\1\0\7\35"+
    "\1\0\2\35\1\0\2\35\1\0\2\35\2\0\1\36\1\0\5\36"+
    "\4\0\2\36\2\0\3\36\3\0\1\36\7\0\4\35\1\0\1\35"+
    "\7\0\14\36\3\35\1\36\13\0\3\36\1\0\11\35\1\0\3\35"+
    "\1\0\26\35\1\0\7\35\1\0\2\35\1\0\5\35\2\0\1\36"+
    "\1\35\10\36\1\0\3\36\1\0\3\36\2\0\1\35\17\0\2\35"+
    "\2\36\2\0\12\36\1\0\1\35\7\0\1\35\7\0\3\36\1\0"+
    "\10\35\2\0\2\35\2\0\26\35\1\0\7\35\1\0\2\35\1\0"+
    "\5\35\2\0\1\36\1\35\7\36\2\0\2\36\2\0\3\36\10\0"+
    "\2\36\4\0\2\35\1\0\3\35\2\36\2\0\12\36\1\0\1\35"+
    "\20\0\1\36\1\35\1\0\6\35\3\0\3\35\1\0\4\35\3\0"+
    "\2\35\1\0\1\35\1\0\2\35\3\0\2\35\3\0\3\35\3\0"+
    "\14\35\4\0\5\36\3\0\3\36\1\0\4\36\2\0\1\35\6\0"+
    "\1\36\16\0\12\36\11\0\1\35\6\0\4\36\1\0\10\35\1\0"+
    "\3\35\1\0\27\35\1\0\20\35\3\0\1\35\7\36\1\0\3\36"+
    "\1\0\4\36\7\0\2\36\1\0\3\35\5\0\2\35\2\36\2\0"+
    "\12\36\21\0\3\36\1\0\10\35\1\0\3\35\1\0\27\35\1\0"+
    "\12\35\1\0\5\35\2\0\1\36\1\35\7\36\1\0\3\36\1\0"+
    "\4\36\7\0\2\36\7\0\1\35\1\0\2\35\2\36\2\0\12\36"+
    "\1\0\2\35\16\0\3\36\1\0\10\35\1\0\3\35\1\0\51\35"+
    "\2\0\1\35\7\36\1\0\3\36\1\0\4\36\1\35\10\0\1\36"+
    "\7\0\3\35\2\36\2\0\12\36\12\0\6\35\2\0\2\36\1\0"+
    "\22\35\3\0\30\35\1\0\11\35\1\0\1\35\2\0\7\35\3\0"+
    "\1\36\4\0\6\36\1\0\1\36\1\0\10\36\6\0\12\36\2\0"+
    "\2\36\15\0\60\35\1\36\2\35\7\36\4\0\10\35\10\36\1\0"+
    "\12\36\47\0\2\35\1\0\1\35\2\0\2\35\1\0\1\35\2\0"+
    "\1\35\6\0\4\35\1\0\7\35\1\0\3\35\1\0\1\35\1\0"+
    "\1\35\2\0\2\35\1\0\4\35\1\36\2\35\6\36\1\0\2\36"+
    "\1\35\2\0\5\35\1\0\1\35\1\0\6\36\2\0\12\36\2\0"+
    "\4\35\40\0\1\35\27\0\2\36\6\0\12\36\13\0\1\36\1\0"+
    "\1\36\1\0\1\36\4\0\2\36\10\35\1\0\44\35\4\0\24\36"+
    "\1\0\2\36\5\35\13\36\1\0\44\36\11\0\1\36\71\0\53\35"+
    "\24\36\1\35\12\36\6\0\6\35\4\36\4\35\3\36\1\35\3\36"+
    "\2\35\7\36\3\35\4\36\15\35\14\36\1\35\17\36\2\0\46\35"+
    "\1\0\1\35\5\0\1\35\2\0\53\35\1\0\u014d\35\1\0\4\35"+
    "\2\0\7\35\1\0\1\35\1\0\4\35\2\0\51\35\1\0\4\35"+
    "\2\0\41\35\1\0\4\35\2\0\7\35\1\0\1\35\1\0\4\35"+
    "\2\0\17\35\1\0\71\35\1\0\4\35\2\0\103\35\2\0\3\36"+
    "\40\0\20\35\20\0\126\35\2\0\6\35\3\0\u026c\35\2\0\21\35"+
    "\1\0\32\35\5\0\113\35\3\0\13\35\7\0\15\35\1\0\4\35"+
    "\3\36\13\0\22\35\3\36\13\0\22\35\2\36\14\0\15\35\1\0"+
    "\3\35\1\0\2\36\14\0\64\35\40\36\3\0\1\35\3\0\2\35"+
    "\1\36\2\0\12\36\41\0\4\36\1\0\12\36\6\0\130\35\10\0"+
    "\51\35\1\36\1\35\5\0\106\35\12\0\37\35\1\0\14\36\4\0"+
    "\14\36\12\0\12\36\36\35\2\0\5\35\13\0\54\35\4\0\32\35"+
    "\6\0\12\36\46\0\27\35\5\36\4\0\65\35\12\36\1\0\35\36"+
    "\2\0\13\36\6\0\12\36\15\0\1\35\10\0\16\36\102\0\5\36"+
    "\57\35\21\36\7\35\4\0\12\36\21\0\11\36\14\0\3\36\36\35"+
    "\15\36\2\35\12\36\54\35\16\36\14\0\44\35\24\36\10\0\12\36"+
    "\3\0\3\35\12\36\44\35\122\0\3\36\1\0\25\36\4\35\1\36"+
    "\4\35\3\36\2\35\1\0\2\36\6\0\300\35\66\36\6\0\4\36"+
    "\u0116\35\2\0\6\35\2\0\46\35\2\0\6\35\2\0\10\35\1\0"+
    "\1\35\1\0\1\35\1\0\1\35\1\0\37\35\2\0\65\35\1\0"+
    "\7\35\1\0\1\35\3\0\3\35\1\0\7\35\3\0\4\35\2\0"+
    "\6\35\4\0\15\35\5\0\3\35\1\0\7\35\16\0\5\36\30\0"+
    "\1\5\1\5\5\36\20\0\2\35\23\0\1\35\13\0\5\36\1\0"+
    "\12\36\1\0\1\35\15\0\1\35\20\0\15\35\3\0\37\35\21\0"+
    "\15\36\4\0\1\36\3\0\14\36\21\0\1\35\4\0\1\35\2\0"+
    "\12\35\1\0\1\35\3\0\5\35\6\0\1\35\1\0\1\35\1\0"+
    "\1\35\1\0\4\35\1\0\13\35\2\0\4\35\5\0\5\35\4\0"+
    "\1\35\21\0\51\35\u0a77\0\57\35\1\0\57\35\1\0\205\35\6\0"+
    "\4\35\3\36\2\35\14\0\46\35\1\0\1\35\5\0\1\35\2\0"+
    "\70\35\7\0\1\35\17\0\1\36\27\35\11\0\7\35\1\0\7\35"+
    "\1\0\7\35\1\0\7\35\1\0\7\35\1\0\7\35\1\0\7\35"+
    "\1\0\7\35\1\0\40\36\57\0\1\35\u01d5\0\3\35\31\0\11\35"+
    "\6\36\1\0\5\35\2\0\5\35\4\0\126\35\2\0\2\36\2\0"+
    "\3\35\1\0\132\35\1\0\4\35\5\0\51\35\3\0\136\35\21\0"+
    "\33\35\65\0\20\35\u0200\0\u19b6\35\112\0\u51d6\35\52\0\u048d\35\103\0"+
    "\56\35\2\0\u010d\35\3\0\20\35\12\36\2\35\24\0\57\35\1\36"+
    "\4\0\12\36\1\0\37\35\2\36\120\35\2\36\45\0\11\35\2\0"+
    "\147\35\2\0\43\35\2\0\10\35\77\0\13\35\1\36\3\35\1\36"+
    "\4\35\1\36\27\35\5\36\20\0\1\35\7\0\64\35\14\0\2\36"+
    "\62\35\21\36\13\0\12\36\6\0\22\36\6\35\3\0\1\35\1\0"+
    "\1\35\2\0\12\36\34\35\10\36\2\0\27\35\15\36\14\0\35\35"+
    "\3\0\4\36\57\35\16\36\16\0\1\35\12\36\6\0\5\35\1\36"+
    "\12\35\12\36\5\35\1\0\51\35\16\36\11\0\3\35\1\36\10\35"+
    "\2\36\2\0\12\36\6\0\27\35\3\0\1\35\3\36\62\35\1\36"+
    "\1\35\3\36\2\35\2\36\5\35\2\36\1\35\1\36\1\35\30\0"+
    "\3\35\2\0\13\35\5\36\2\0\3\35\2\36\12\0\6\35\2\0"+
    "\6\35\2\0\6\35\11\0\7\35\1\0\7\35\1\0\53\35\1\0"+
    "\12\35\12\0\163\35\10\36\1\0\2\36\2\0\12\36\6\0\u2ba4\35"+
    "\14\0\27\35\4\0\61\35\u2104\0\u016e\35\2\0\152\35\46\0\7\35"+
    "\14\0\5\35\5\0\1\35\1\36\12\35\1\0\15\35\1\0\5\35"+
    "\1\0\1\35\1\0\2\35\1\0\2\35\1\0\154\35\41\0\u016b\35"+
    "\22\0\100\35\2\0\66\35\50\0\15\35\3\0\20\36\20\0\20\36"+
    "\3\0\2\35\30\0\3\35\31\0\1\35\6\0\5\35\1\0\207\35"+
    "\2\0\1\36\4\0\1\35\13\0\12\36\7\0\32\35\4\0\1\35"+
    "\1\0\32\35\13\0\131\35\3\0\6\35\2\0\6\35\2\0\6\35"+
    "\2\0\3\35\3\0\2\35\3\0\2\35\22\0\3\36\4\0\14\35"+
    "\1\0\32\35\1\0\23\35\1\0\2\35\1\0\17\35\2\0\16\35"+
    "\42\0\173\35\105\0\65\35\210\0\1\36\202\0\35\35\3\0\61\35"+
    "\17\0\1\36\37\0\40\35\20\0\33\35\5\0\46\35\5\36\5\0"+
    "\36\35\2\0\44\35\4\0\10\35\1\0\5\35\52\0\236\35\2\0"+
    "\12\36\126\0\50\35\10\0\64\35\234\0\u0137\35\11\0\26\35\12\0"+
    "\10\35\230\0\6\35\2\0\1\35\1\0\54\35\1\0\2\35\3\0"+
    "\1\35\2\0\27\35\12\0\27\35\11\0\37\35\101\0\23\35\1\0"+
    "\2\35\12\0\26\35\12\0\32\35\106\0\70\35\6\0\2\35\100\0"+
    "\1\35\3\36\1\0\2\36\5\0\4\36\4\35\1\0\3\35\1\0"+
    "\33\35\4\0\3\36\4\0\1\36\40\0\35\35\3\0\35\35\43\0"+
    "\10\35\1\0\34\35\2\36\31\0\66\35\12\0\26\35\12\0\23\35"+
    "\15\0\22\35\156\0\111\35\67\0\63\35\15\0\63\35\u030d\0\3\36"+
    "\65\35\17\36\37\0\12\36\17\0\4\36\55\35\13\36\2\0\1\36"+
    "\22\0\31\35\7\0\12\36\6\0\3\36\44\35\16\36\1\0\12\36"+
    "\20\0\43\35\1\36\2\0\1\35\11\0\3\36\60\35\16\36\4\35"+
    "\5\0\3\36\3\0\12\36\1\35\1\0\1\35\43\0\22\35\1\0"+
    "\31\35\14\36\110\0\7\35\1\0\1\35\1\0\4\35\1\0\17\35"+
    "\1\0\12\35\7\0\57\35\14\36\5\0\12\36\6\0\4\36\1\0"+
    "\10\35\2\0\2\35\2\0\26\35\1\0\7\35\1\0\2\35\1\0"+
    "\5\35\2\0\1\36\1\35\7\36\2\0\2\36\2\0\3\36\2\0"+
    "\1\35\6\0\1\36\5\0\5\35\2\36\2\0\7\36\3\0\5\36"+
    "\u010b\0\60\35\24\36\2\35\1\0\1\35\10\0\12\36\246\0\57\35"+
    "\7\36\2\0\11\36\27\0\4\35\2\36\42\0\60\35\21\36\3\0"+
    "\1\35\13\0\12\36\46\0\53\35\15\36\10\0\12\36\66\0\32\35"+
    "\3\0\17\36\4\0\12\36\u0166\0\100\35\12\36\25\0\1\35\u01c0\0"+
    "\71\35\u0507\0\u039a\35\146\0\157\35\21\0\304\35\u0abc\0\u042f\35\u0fd1\0"+
    "\u0247\35\u21b9\0\u0239\35\7\0\37\35\1\0\12\36\146\0\36\35\2\0"+
    "\5\36\13\0\60\35\7\36\11\0\4\35\14\0\12\36\11\0\25\35"+
    "\5\0\23\35\u0370\0\105\35\13\0\1\35\56\36\20\0\4\36\15\35"+
    "\u4060\0\2\35\u0bfe\0\153\35\5\0\15\35\3\0\11\35\7\0\12\35"+
    "\3\0\2\36\1\0\4\36\u14c1\0\5\36\3\0\26\36\2\0\7\36"+
    "\36\0\4\36\224\0\3\36\u01bb\0\125\35\1\0\107\35\1\0\2\35"+
    "\2\0\1\35\2\0\2\35\2\0\4\35\1\0\14\35\1\0\1\35"+
    "\1\0\7\35\1\0\101\35\1\0\4\35\2\0\10\35\1\0\7\35"+
    "\1\0\34\35\1\0\4\35\1\0\5\35\1\0\1\35\3\0\7\35"+
    "\1\0\u0154\35\2\0\31\35\1\0\31\35\1\0\37\35\1\0\31\35"+
    "\1\0\37\35\1\0\31\35\1\0\37\35\1\0\31\35\1\0\37\35"+
    "\1\0\31\35\1\0\10\35\2\0\62\36\u0200\0\67\36\4\0\62\36"+
    "\10\0\1\36\16\0\1\36\26\0\5\36\1\0\17\36\u0d50\0\305\35"+
    "\13\0\7\36\u0529\0\4\35\1\0\33\35\1\0\2\35\1\0\1\35"+
    "\2\0\1\35\1\0\12\35\1\0\4\35\1\0\1\35\1\0\1\35"+
    "\6\0\1\35\4\0\1\35\1\0\1\35\1\0\1\35\1\0\3\35"+
    "\1\0\2\35\1\0\1\35\2\0\1\35\1\0\1\35\1\0\1\35"+
    "\1\0\1\35\1\0\1\35\1\0\2\35\1\0\1\35\2\0\4\35"+
    "\1\0\7\35\1\0\4\35\1\0\4\35\1\0\1\35\1\0\12\35"+
    "\1\0\21\35\5\0\3\35\1\0\5\35\1\0\21\35\u1144\0\ua6d7\35"+
    "\51\0\u1035\35\13\0\336\35\2\0\u1682\35\u295e\0\u021e\35\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\36\36\0\140\36\200\0\360\36\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\1\22\3\1\4\1\1\4\4"+
    "\4\5\2\6\1\1\1\7\1\10\1\0\1\11\1\2"+
    "\4\0\1\2\3\12\1\13\1\0\7\12\2\14\17\12"+
    "\1\4\6\12\1\4\2\0\1\15\1\16\1\0\1\17"+
    "\1\0\1\20\1\21\1\0\1\6\2\0\1\10\1\2"+
    "\1\22\1\2\10\12\1\14\23\12\3\0\2\17\1\6"+
    "\1\23\1\0\1\23\13\12\1\24\3\12\4\0\1\17"+
    "\1\6\1\25\1\12\1\26\6\12\1\0\1\17\1\6"+
    "\2\12";

  private static int [] zzUnpackAction() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366"+
    "\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536"+
    "\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u061e\0\u0658\0\u0692\0\u06cc"+
    "\0\u015c\0\u015c\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee\0\u0828"+
    "\0\u015c\0\u0862\0\u089c\0\u015c\0\u08d6\0\u0910\0\u094a\0\u0984"+
    "\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u015c\0\u0ae0\0\u0b1a"+
    "\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0a32\0\u0cb0"+
    "\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80"+
    "\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u0a32"+
    "\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u077a"+
    "\0\u11e6\0\u015c\0\u015c\0\u0706\0\u1220\0\u125a\0\u015c\0\u015c"+
    "\0\u1294\0\u12ce\0\u1308\0\u1342\0\u015c\0\u015c\0\u015c\0\u137c"+
    "\0\u13b6\0\u13f0\0\u142a\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c"+
    "\0\u1586\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c"+
    "\0\u1756\0\u1790\0\u17ca\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec"+
    "\0\u1926\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc"+
    "\0\u1af6\0\u1b30\0\u015c\0\u1b6a\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18"+
    "\0\u1c52\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74\0\u1dae\0\u1de8"+
    "\0\u0a32\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e"+
    "\0\u1fb8\0\u1ff2\0\u015c\0\u202c\0\u0a32\0\u2066\0\u20a0\0\u20da"+
    "\0\u2114\0\u214e\0\u2188\0\u21c2\0\u1f7e\0\u21fc\0\u2236\0\u2270";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\3\10\1\11\1\7\1\10\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\2\31\1\32\1\33\4\31"+
    "\2\7\1\34\1\35\2\34\1\36\1\37\1\40\1\41"+
    "\2\42\1\43\1\42\1\44\1\45\1\46\1\47\2\31"+
    "\1\47\1\31\1\7\1\50\1\51\1\10\2\31\1\52"+
    "\2\0\61\52\1\53\1\52\1\54\3\52\4\55\1\56"+
    "\65\55\7\0\27\57\22\0\2\57\1\0\1\57\4\0"+
    "\2\57\50\0\1\60\30\0\27\61\2\6\16\0\2\6"+
    "\2\61\1\6\1\61\4\0\2\61\73\0\3\10\2\0"+
    "\1\10\60\0\1\10\6\0\1\62\74\0\1\63\1\64"+
    "\12\63\1\65\12\63\2\31\10\0\1\66\5\0\2\31"+
    "\2\63\1\31\1\63\3\0\1\67\2\63\7\0\4\63"+
    "\1\70\2\63\1\71\13\63\1\72\3\63\2\31\10\0"+
    "\1\66\5\0\2\31\2\63\1\31\1\63\3\0\1\67"+
    "\2\63\7\0\6\63\1\73\1\74\3\63\1\75\1\76"+
    "\12\63\2\31\10\0\1\66\5\0\2\31\2\63\1\31"+
    "\1\63\3\0\1\67\2\63\7\0\2\63\1\77\1\63"+
    "\1\100\22\63\2\31\10\0\1\66\5\0\2\31\2\63"+
    "\1\31\1\63\3\0\1\67\2\63\7\0\1\63\1\101"+
    "\12\63\1\102\12\63\2\31\10\0\1\66\5\0\2\31"+
    "\2\63\1\31\1\63\3\0\1\67\2\63\7\0\6\63"+
    "\1\103\5\63\1\104\3\63\1\105\6\63\2\31\10\0"+
    "\1\66\5\0\2\31\2\63\1\31\1\63\3\0\1\67"+
    "\2\63\7\0\4\63\1\106\6\63\1\107\13\63\2\31"+
    "\10\0\1\66\5\0\2\31\2\63\1\31\1\63\3\0"+
    "\1\67\2\63\7\0\1\63\1\110\12\63\1\111\12\63"+
    "\2\31\10\0\1\66\5\0\2\31\2\63\1\31\1\63"+
    "\3\0\1\67\2\63\7\0\3\63\1\112\5\63\1\113"+
    "\10\63\1\114\4\63\2\31\10\0\1\66\5\0\2\31"+
    "\2\63\1\31\1\63\3\0\1\67\2\63\7\0\12\63"+
    "\1\115\14\63\2\31\10\0\1\66\5\0\2\31\2\63"+
    "\1\31\1\63\3\0\1\67\2\63\7\0\1\63\1\116"+
    "\25\63\2\31\10\0\1\66\5\0\2\31\2\63\1\31"+
    "\1\63\3\0\1\67\2\63\7\0\4\63\1\117\22\63"+
    "\2\31\10\0\1\66\5\0\2\31\2\63\1\31\1\63"+
    "\3\0\1\67\2\63\7\0\2\63\1\77\7\63\1\120"+
    "\14\63\2\31\10\0\1\66\5\0\2\31\2\63\1\31"+
    "\1\63\3\0\1\67\2\63\7\0\12\63\1\121\14\63"+
    "\2\31\10\0\1\66\5\0\2\31\2\63\1\31\1\63"+
    "\3\0\1\67\2\63\7\0\1\63\1\122\10\63\1\123"+
    "\1\63\1\124\12\63\2\31\10\0\1\66\5\0\2\31"+
    "\2\63\1\31\1\63\3\0\1\67\2\63\7\0\27\63"+
    "\2\31\10\0\1\66\5\0\2\31\2\63\1\31\1\63"+
    "\3\0\1\67\2\63\7\0\14\63\1\125\12\63\2\31"+
    "\10\0\1\66\5\0\2\31\2\63\1\31\1\63\3\0"+
    "\1\67\2\63\7\0\20\63\1\126\6\63\2\31\10\0"+
    "\1\66\5\0\2\31\2\63\1\31\1\63\3\0\1\67"+
    "\2\63\40\0\1\41\71\0\1\41\3\0\1\41\65\0"+
    "\1\41\1\0\1\42\2\0\1\127\7\0\1\130\1\131"+
    "\1\47\2\0\1\47\13\0\1\132\33\0\1\41\104\0"+
    "\1\133\13\0\1\134\56\0\1\42\73\0\2\135\2\0"+
    "\1\135\17\0\1\136\1\137\4\0\1\140\13\0\1\141"+
    "\22\0\1\135\1\142\1\0\1\141\1\0\1\142\1\136"+
    "\4\0\1\140\1\137\10\0\1\136\1\137\4\0\1\140"+
    "\36\0\1\135\2\47\2\0\1\47\1\136\4\0\1\140"+
    "\1\137\1\143\2\0\2\143\2\0\30\143\1\0\24\143"+
    "\1\144\5\143\1\52\2\0\61\52\1\0\1\52\1\0"+
    "\3\52\11\0\1\145\1\0\1\145\4\0\2\145\3\0"+
    "\1\145\30\0\1\145\5\0\3\145\3\0\4\55\1\0"+
    "\65\55\46\146\1\147\23\146\7\0\31\57\16\0\6\57"+
    "\4\0\2\57\67\0\1\60\11\0\27\61\2\6\16\0"+
    "\2\6\2\61\1\6\1\61\3\0\1\60\2\61\1\62"+
    "\1\150\1\146\67\62\7\0\31\63\10\0\1\66\5\0"+
    "\6\63\3\0\1\67\2\63\7\0\2\63\1\151\26\63"+
    "\10\0\1\66\5\0\6\63\3\0\1\67\2\63\7\0"+
    "\13\63\1\152\15\63\10\0\1\66\5\0\6\63\3\0"+
    "\1\67\2\63\7\0\27\153\12\0\1\66\7\0\2\153"+
    "\1\0\1\153\3\0\1\67\2\153\7\0\1\77\30\63"+
    "\10\0\1\66\5\0\6\63\3\0\1\67\2\63\7\0"+
    "\10\63\1\154\20\63\10\0\1\66\5\0\6\63\3\0"+
    "\1\67\2\63\7\0\11\63\1\155\17\63\10\0\1\66"+
    "\5\0\6\63\3\0\1\67\2\63\7\0\7\63\1\156"+
    "\21\63\10\0\1\66\5\0\6\63\3\0\1\67\2\63"+
    "\7\0\14\63\1\157\14\63\10\0\1\66\5\0\6\63"+
    "\3\0\1\67\2\63\7\0\4\63\1\160\24\63\10\0"+
    "\1\66\5\0\6\63\3\0\1\67\2\63\7\0\12\63"+
    "\1\161\16\63\10\0\1\66\5\0\6\63\3\0\1\67"+
    "\2\63\7\0\11\63\1\77\3\63\1\162\13\63\10\0"+
    "\1\66\5\0\6\63\3\0\1\67\2\63\7\0\22\63"+
    "\1\77\6\63\10\0\1\66\5\0\6\63\3\0\1\67"+
    "\2\63\7\0\11\63\1\120\17\63\10\0\1\66\5\0"+
    "\6\63\3\0\1\67\2\63\7\0\7\63\1\163\1\154"+
    "\20\63\10\0\1\66\5\0\6\63\3\0\1\67\2\63"+
    "\7\0\4\63\1\164\24\63\10\0\1\66\5\0\6\63"+
    "\3\0\1\67\2\63\7\0\6\63\1\165\22\63\10\0"+
    "\1\66\5\0\6\63\3\0\1\67\2\63\7\0\1\120"+
    "\30\63\10\0\1\66\5\0\6\63\3\0\1\67\2\63"+
    "\7\0\11\63\1\166\17\63\10\0\1\66\5\0\6\63"+
    "\3\0\1\67\2\63\7\0\4\63\1\77\24\63\10\0"+
    "\1\66\5\0\6\63\3\0\1\67\2\63\7\0\4\63"+
    "\1\167\24\63\10\0\1\66\5\0\6\63\3\0\1\67"+
    "\2\63\7\0\25\63\1\170\3\63\10\0\1\66\5\0"+
    "\6\63\3\0\1\67\2\63\7\0\6\63\1\171\3\63"+
    "\1\172\16\63\10\0\1\66\5\0\6\63\3\0\1\67"+
    "\2\63\7\0\3\63\1\173\25\63\10\0\1\66\5\0"+
    "\6\63\3\0\1\67\2\63\7\0\13\63\1\174\15\63"+
    "\10\0\1\66\5\0\6\63\3\0\1\67\2\63\7\0"+
    "\5\63\1\175\3\63\1\176\3\63\1\177\13\63\10\0"+
    "\1\66\5\0\6\63\3\0\1\67\2\63\7\0\11\63"+
    "\1\200\17\63\10\0\1\66\5\0\6\63\3\0\1\67"+
    "\2\63\7\0\3\63\1\201\25\63\10\0\1\66\5\0"+
    "\6\63\3\0\1\67\2\63\7\0\17\63\1\202\11\63"+
    "\10\0\1\66\5\0\6\63\3\0\1\67\2\63\7\0"+
    "\1\63\1\203\27\63\10\0\1\66\5\0\6\63\3\0"+
    "\1\67\2\63\7\0\14\63\1\163\14\63\10\0\1\66"+
    "\5\0\6\63\3\0\1\67\2\63\7\0\3\63\1\70"+
    "\25\63\10\0\1\66\5\0\6\63\3\0\1\67\2\63"+
    "\7\0\3\63\1\204\25\63\10\0\1\66\5\0\6\63"+
    "\3\0\1\67\2\63\56\0\1\205\1\206\2\0\1\206"+
    "\41\0\1\141\22\0\1\135\1\142\1\0\1\141\1\0"+
    "\1\142\17\0\1\136\1\137\44\0\2\135\2\0\1\135"+
    "\1\136\5\0\1\137\45\0\1\207\10\0\1\210\1\211"+
    "\2\0\1\211\16\0\3\212\2\0\2\212\7\0\1\212"+
    "\30\0\2\212\1\0\3\212\5\0\1\212\10\0\1\136"+
    "\1\137\4\0\1\140\36\0\1\135\1\142\3\0\1\142"+
    "\1\136\4\0\1\140\1\137\65\0\1\213\15\0\1\214"+
    "\1\0\1\214\4\0\2\214\3\0\1\214\30\0\1\214"+
    "\5\0\1\214\1\215\1\214\5\0\1\146\76\0\3\63"+
    "\1\216\2\63\1\217\22\63\10\0\1\66\5\0\6\63"+
    "\3\0\1\67\2\63\7\0\16\63\1\204\12\63\10\0"+
    "\1\66\5\0\6\63\3\0\1\67\2\63\7\0\31\153"+
    "\16\0\6\153\4\0\2\153\7\0\1\63\1\77\27\63"+
    "\10\0\1\66\5\0\6\63\3\0\1\67\2\63\7\0"+
    "\1\63\1\220\27\63\10\0\1\66\5\0\6\63\3\0"+
    "\1\67\2\63\7\0\10\63\1\221\20\63\10\0\1\66"+
    "\5\0\6\63\3\0\1\67\2\63\7\0\6\63\1\222"+
    "\22\63\10\0\1\66\5\0\6\63\3\0\1\67\2\63"+
    "\7\0\5\63\1\223\23\63\10\0\1\66\5\0\6\63"+
    "\3\0\1\67\2\63\7\0\1\63\1\224\27\63\10\0"+
    "\1\66\5\0\6\63\3\0\1\67\2\63\7\0\13\63"+
    "\1\222\15\63\10\0\1\66\5\0\6\63\3\0\1\67"+
    "\2\63\7\0\7\63\1\77\21\63\10\0\1\66\5\0"+
    "\6\63\3\0\1\67\2\63\7\0\10\63\1\222\1\225"+
    "\17\63\10\0\1\66\5\0\6\63\3\0\1\67\2\63"+
    "\7\0\12\63\1\77\16\63\10\0\1\66\5\0\6\63"+
    "\3\0\1\67\2\63\7\0\14\63\1\77\14\63\10\0"+
    "\1\66\5\0\6\63\3\0\1\67\2\63\7\0\17\63"+
    "\1\77\11\63\10\0\1\66\5\0\6\63\3\0\1\67"+
    "\2\63\7\0\1\63\1\226\27\63\10\0\1\66\5\0"+
    "\6\63\3\0\1\67\2\63\7\0\11\63\1\227\1\222"+
    "\16\63\10\0\1\66\5\0\6\63\3\0\1\67\2\63"+
    "\7\0\3\63\1\111\25\63\10\0\1\66\5\0\6\63"+
    "\3\0\1\67\2\63\7\0\11\63\1\230\17\63\10\0"+
    "\1\66\5\0\6\63\3\0\1\67\2\63\7\0\1\63"+
    "\1\231\27\63\10\0\1\66\5\0\6\63\3\0\1\67"+
    "\2\63\7\0\14\63\1\232\14\63\10\0\1\66\5\0"+
    "\6\63\3\0\1\67\2\63\7\0\13\63\1\220\15\63"+
    "\10\0\1\66\5\0\6\63\3\0\1\67\2\63\7\0"+
    "\1\63\1\157\27\63\10\0\1\66\5\0\6\63\3\0"+
    "\1\67\2\63\7\0\3\63\1\163\25\63\10\0\1\66"+
    "\5\0\6\63\3\0\1\67\2\63\7\0\4\63\1\233"+
    "\24\63\10\0\1\66\5\0\6\63\3\0\1\67\2\63"+
    "\7\0\3\63\1\110\25\63\10\0\1\66\5\0\6\63"+
    "\3\0\1\67\2\63\7\0\6\63\1\234\22\63\10\0"+
    "\1\66\5\0\6\63\3\0\1\67\2\63\7\0\7\63"+
    "\1\154\21\63\10\0\1\66\5\0\6\63\3\0\1\67"+
    "\2\63\32\0\1\235\23\0\1\236\1\0\1\235\1\0"+
    "\1\236\64\0\1\135\2\206\2\0\1\206\65\0\1\237"+
    "\1\211\2\0\1\211\20\0\1\137\20\0\1\240\23\0"+
    "\1\241\1\0\1\240\1\0\1\241\6\0\1\137\11\0"+
    "\1\137\44\0\2\211\2\0\1\211\6\0\1\137\7\0"+
    "\1\212\1\242\1\212\2\0\2\212\1\140\6\0\1\212"+
    "\27\0\1\135\2\212\1\0\2\212\1\242\4\0\1\140"+
    "\1\212\65\0\1\243\13\0\4\63\1\154\24\63\10\0"+
    "\1\66\5\0\6\63\3\0\1\67\2\63\7\0\13\63"+
    "\1\244\15\63\10\0\1\66\5\0\6\63\3\0\1\67"+
    "\2\63\7\0\12\63\1\110\16\63\10\0\1\66\5\0"+
    "\6\63\3\0\1\67\2\63\7\0\1\63\1\245\27\63"+
    "\10\0\1\66\5\0\6\63\3\0\1\67\2\63\7\0"+
    "\11\63\1\77\17\63\10\0\1\66\5\0\6\63\3\0"+
    "\1\67\2\63\7\0\11\63\1\246\17\63\10\0\1\66"+
    "\5\0\6\63\3\0\1\67\2\63\7\0\6\63\1\230"+
    "\22\63\10\0\1\66\5\0\6\63\3\0\1\67\2\63"+
    "\7\0\3\63\1\247\25\63\10\0\1\66\5\0\6\63"+
    "\3\0\1\67\2\63\7\0\14\63\1\250\14\63\10\0"+
    "\1\66\5\0\6\63\3\0\1\67\2\63\7\0\3\63"+
    "\1\251\25\63\10\0\1\66\5\0\6\63\3\0\1\67"+
    "\2\63\7\0\5\63\1\252\23\63\10\0\1\66\5\0"+
    "\6\63\3\0\1\67\2\63\7\0\12\63\1\70\16\63"+
    "\10\0\1\66\5\0\6\63\3\0\1\67\2\63\7\0"+
    "\11\63\1\253\17\63\10\0\1\66\5\0\6\63\3\0"+
    "\1\67\2\63\7\0\24\63\1\77\4\63\10\0\1\66"+
    "\5\0\6\63\3\0\1\67\2\63\7\0\3\254\2\0"+
    "\2\254\7\0\1\254\30\0\2\254\1\0\3\254\5\0"+
    "\1\254\55\0\1\135\1\236\3\0\1\236\41\0\1\240"+
    "\23\0\1\241\1\0\1\240\1\0\1\241\16\0\3\255"+
    "\2\0\2\255\7\0\1\255\30\0\2\255\1\0\3\255"+
    "\5\0\1\255\11\0\1\137\44\0\1\241\3\0\1\241"+
    "\6\0\1\137\7\0\1\212\1\242\1\212\2\0\2\212"+
    "\1\140\6\0\1\212\17\0\1\207\7\0\1\135\1\256"+
    "\1\212\1\0\2\212\1\242\4\0\1\140\1\212\7\0"+
    "\7\63\1\222\21\63\10\0\1\66\5\0\6\63\3\0"+
    "\1\67\2\63\7\0\3\63\1\257\25\63\10\0\1\66"+
    "\5\0\6\63\3\0\1\67\2\63\7\0\4\63\1\260"+
    "\24\63\10\0\1\66\5\0\6\63\3\0\1\67\2\63"+
    "\7\0\2\63\1\77\26\63\10\0\1\66\5\0\6\63"+
    "\3\0\1\67\2\63\7\0\5\63\1\77\23\63\10\0"+
    "\1\66\5\0\6\63\3\0\1\67\2\63\7\0\20\63"+
    "\1\77\10\63\10\0\1\66\5\0\6\63\3\0\1\67"+
    "\2\63\7\0\7\63\1\110\21\63\10\0\1\66\5\0"+
    "\6\63\3\0\1\67\2\63\7\0\3\254\2\0\2\254"+
    "\7\0\1\254\27\0\1\135\2\254\1\0\3\254\5\0"+
    "\1\254\7\0\1\212\1\242\1\212\2\0\2\212\1\140"+
    "\6\0\1\212\4\0\1\240\22\0\1\135\2\212\1\240"+
    "\2\212\1\242\4\0\1\140\1\212\7\0\14\63\1\110"+
    "\14\63\10\0\1\66\5\0\6\63\3\0\1\67\2\63"+
    "\7\0\13\63\1\154\15\63\10\0\1\66\5\0\6\63"+
    "\3\0\1\67\2\63";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8874];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\31\1\2\11\6\1\1\11\1\1\1\0"+
    "\1\11\1\1\1\0\7\1\1\11\1\0\40\1\2\0"+
    "\2\11\1\0\1\1\1\0\2\11\1\0\1\1\2\0"+
    "\3\11\35\1\3\0\3\1\1\11\1\0\20\1\4\0"+
    "\2\1\1\11\10\1\1\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
    private StringBuffer string = new StringBuffer();
    private Symbol currentSymbol = null;

    private Symbol symbol(String name, Token token) {
        return new Symbol(name, token);
    }

    private Symbol symbol(String name, Token token, Object val) {
        return new Symbol(name, token, val);
    }

    public Symbol currentToken() {
        return currentSymbol;
    }

    public String nextToken() {
        try {
            currentSymbol = next_token();
            return currentSymbol.getToken();
        } catch (IOException e) {
            throw new RuntimeException("Unable to get next token", e);
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3276) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {      return symbol("EOF", Token._$);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error("Illegal character <" + yytext() + ">");
            } 
            // fall through
          case 23: break;
          case 2: 
            { /* skip */
            } 
            // fall through
          case 24: break;
          case 3: 
            { return symbol("Identifier", Token.getWithRepresentation("identifier"), yytext());
            } 
            // fall through
          case 25: break;
          case 4: 
            { return symbol("Operator", Token.getWithRepresentation(yytext()));
            } 
            // fall through
          case 26: break;
          case 5: 
            { return symbol("Special", Token.getWithRepresentation(yytext()));
            } 
            // fall through
          case 27: break;
          case 6: 
            { return symbol("Integer", Token.getWithRepresentation("int_const"), Integer.valueOf(yytext()));
            } 
            // fall through
          case 28: break;
          case 7: 
            { string.setLength(0); yybegin(STRING);
            } 
            // fall through
          case 29: break;
          case 8: 
            { string.append(yytext());
            } 
            // fall through
          case 30: break;
          case 9: 
            { yybegin(YYINITIAL);
                                    return symbol("String", Token.getWithRepresentation("string_const"), string.toString());
            } 
            // fall through
          case 31: break;
          case 10: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 3;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 5;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { if (Token.isReversed(yytext())) {
                                            return symbol("Reserved", Token.valueOf("_" + yytext()));
                                        } else {
                                            return symbol("DefineIdentifier", Token.getWithRepresentation("define_identifier"), yytext());
                                        }
            } 
            // fall through
          case 32: break;
          case 11: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 3;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 4;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { if (Token.isReversed(yytext())) {
                                            return symbol("Reserved", Token.valueOf("_" + yytext()));
                                        } else {
                                            return symbol("MethodIdentifier", Token.getWithRepresentation("method_identifier"), yytext());
                                        }
            } 
            // fall through
          case 33: break;
          case 12: 
            { return symbol("Reserved", Token.valueOf("_" + yytext()));
            } 
            // fall through
          case 34: break;
          case 13: 
            { yybegin(COMMENT);
            } 
            // fall through
          case 35: break;
          case 14: 
            { return symbol("Special", Token.getWithRepresentation("[]"));
            } 
            // fall through
          case 36: break;
          case 15: 
            { return symbol("Double", Token.getWithRepresentation("double_const"), Double.valueOf(yytext()));
            } 
            // fall through
          case 37: break;
          case 16: 
            { return symbol("Float", Token.getWithRepresentation("float_const"), Float.valueOf(yytext().substring(0, yytext().length() - 1)));
            } 
            // fall through
          case 38: break;
          case 17: 
            { return symbol("Long", Token.getWithRepresentation("long_const"), Long.valueOf(yytext().substring(0, yytext().length() - 1)));
            } 
            // fall through
          case 39: break;
          case 18: 
            { yybegin(YYINITIAL);
            } 
            // fall through
          case 40: break;
          case 19: 
            { return symbol("Character", Token.getWithRepresentation("char_const"), yytext().substring(1, 2).charAt(0));
            } 
            // fall through
          case 41: break;
          case 20: 
            { return symbol("Reserved", Token.valueOf("_" + yytext()), 1);
            } 
            // fall through
          case 42: break;
          case 21: 
            { char ch;
                                    switch (yytext().substring(1, yytext().length() - 1).charAt(1)) {
                                        case '\'': ch = '\''; break;
                                        case '\"': ch = '\"'; break;
                                        case '\\': ch = '\\'; break;
                                        case 'n': ch = '\n'; break;
                                        case 'r': ch = '\r'; break;
                                        case 't': ch = '\t'; break;
                                        case 'b': ch = '\b'; break;
                                        case 'f': ch = '\f'; break;
                                        case '0': ch = '\0'; break;
                                        default: throw new RuntimeException("Unhandled escape character: " + yytext());
                                    }
                                    return symbol("EscapeCharacter", Token.getWithRepresentation("char_const"), ch);
            } 
            // fall through
          case 43: break;
          case 22: 
            { return symbol("Reserved", Token.valueOf("_" + yytext()), 0);
            } 
            // fall through
          case 44: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
